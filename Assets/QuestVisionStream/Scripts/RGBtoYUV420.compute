#pragma kernel CSMain

// Input RGB texture from Unity
Texture2D<float4> InputTexture;
SamplerState sampler_InputTexture;

// Output Y, U, V textures for WebRTC I420 format
RWTexture2D<float> OutputY;
RWTexture2D<float> OutputU;
RWTexture2D<float> OutputV;

// BT.601 limited-range coefficients (already scaled for 8-bit studio range)
// Y  = 0.257 R + 0.504 G + 0.098 B + 16/255
// U  = -0.148 R - 0.291 G + 0.439 B + 128/255
// V  = 0.439 R - 0.368 G - 0.071 B + 128/255

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint2 texSize;
    InputTexture.GetDimensions(texSize.x, texSize.y);
    
    if (id.x >= texSize.x || id.y >= texSize.y)
        return;
    
    // Sample RGB pixel (likely linear in Linear color space). Convert to gamma for BT.601.
    float3 rgb = InputTexture.SampleLevel(sampler_InputTexture, 
                                         (id.xy + 0.5f) / texSize, 0).rgb;
    float3 rgbGamma = pow(saturate(rgb), 1.0f / 2.2f);

    // Convert gamma RGB to YUV I420 limited range
    float y = dot(rgbGamma, float3(0.257f, 0.504f, 0.098f)) + 0.0625f;
    OutputY[id.xy] = saturate(y);
    
    // U and V components (subsampled 2x2)
    if (id.x % 2 == 0 && id.y % 2 == 0)
    {
        // Sample 2x2 block for better quality
        float3 rgb00 = InputTexture.SampleLevel(sampler_InputTexture, (id.xy + float2(0,0) + 0.5f) / texSize, 0).rgb;
        float3 rgb01 = InputTexture.SampleLevel(sampler_InputTexture, (id.xy + float2(0,1) + 0.5f) / texSize, 0).rgb;
        float3 rgb10 = InputTexture.SampleLevel(sampler_InputTexture, (id.xy + float2(1,0) + 0.5f) / texSize, 0).rgb;
        float3 rgb11 = InputTexture.SampleLevel(sampler_InputTexture, (id.xy + float2(1,1) + 0.5f) / texSize, 0).rgb;

        float3 avgLinear = (rgb00 + rgb01 + rgb10 + rgb11) * 0.25f;
        float3 avgGamma = pow(saturate(avgLinear), 1.0f / 2.2f);
        float u = dot(avgGamma, float3(-0.148f, -0.291f, 0.439f)) + 0.5f;
        float v = dot(avgGamma, float3( 0.439f, -0.368f, -0.071f)) + 0.5f;
        
        uint2 uvCoord = id.xy / 2;
        OutputU[uvCoord] = saturate(u);
        OutputV[uvCoord] = saturate(v);
    }
}